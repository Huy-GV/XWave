diff --git a/XWave.Core/Services/Communication/ServiceResult.TModel.cs b/XWave.Core/Services/Communication/ServiceResult.TModel.cs
index c3bf4dd..c250f3a 100644
--- a/XWave.Core/Services/Communication/ServiceResult.TModel.cs
+++ b/XWave.Core/Services/Communication/ServiceResult.TModel.cs
@@ -1,27 +1,33 @@
-﻿namespace XWave.Core.Services.Communication;
+namespace XWave.Core.Services.Communication;
 
 public record ServiceResult<TResult> : ServiceResult where TResult : notnull
 {
-    public TResult? Value { get; init; }
+    private readonly TResult _value;
+
+    public TResult Value => Succeeded ? _value : throw new InvalidOperationException();
+
+    private ServiceResult(TResult value)
+    {
+        _value = value;
+        Succeeded = true;
+        Error = Error.Empty();
+    }
+
+    private ServiceResult(Error error)
+    {
+        _value = default!;
+        Succeeded = false;
+        Error = error;
+    }
 
     public static ServiceResult<TResultValue> Success<TResultValue>(TResultValue value) where TResultValue : notnull
     {
-        return new ServiceResult<TResultValue>()
-        {
-            Value = value,
-            Succeeded = true,
-            Error = Error.Empty(),
-        };
+        return new ServiceResult<TResultValue>(value);
     }
 
     public static new ServiceResult<TResult> Failure(Error error)
     {
-        return new ServiceResult<TResult>()
-        {
-            Value = default,
-            Succeeded = false,
-            Error =  error,
-        };
+        return new ServiceResult<TResult>(error);
     }
 
     public static new ServiceResult<TResult> UnknownFailure()
diff --git a/XWave.Core/Services/Communication/ServiceResult.cs b/XWave.Core/Services/Communication/ServiceResult.cs
index 0ce6afb..deb4fda 100644
--- a/XWave.Core/Services/Communication/ServiceResult.cs
+++ b/XWave.Core/Services/Communication/ServiceResult.cs
@@ -1,4 +1,6 @@
-﻿namespace XWave.Core.Services.Communication;
+using Newtonsoft.Json.Linq;
+
+namespace XWave.Core.Services.Communication;
 
 public record ServiceResult
 {
@@ -6,13 +8,21 @@ public record ServiceResult
 
     public Error Error { get; protected init; } = Error.UndefinedError();
 
+    protected ServiceResult()
+    {
+        Succeeded = true;
+        Error = Error.Empty();
+    }
+
+    protected ServiceResult(Error error)
+    {
+        Succeeded = false;
+        Error = error;
+    }
+
     public static ServiceResult Failure(Error error)
     {
-        return new ServiceResult()
-        {
-            Succeeded = false,
-            Error = error ,
-        };
+        return new ServiceResult(error);
     }
 
     /// <summary>
@@ -30,10 +40,6 @@ public record ServiceResult
     /// <returns></returns>
     public static ServiceResult Success()
     {
-        return new() 
-        { 
-            Succeeded = true,
-            Error = Error.Empty(),
-        };
+        return new();
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/ActivityController.cs b/XWave.Web/Controllers/ActivityController.cs
index a6fdc76..dc1fae2 100644
--- a/XWave.Web/Controllers/ActivityController.cs
+++ b/XWave.Web/Controllers/ActivityController.cs
@@ -1,4 +1,4 @@
-﻿using System.Collections.Generic;
+using System.Collections.Generic;
 using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
@@ -16,7 +16,7 @@ namespace XWave.Web.Controllers;
 public class ActivityController : ControllerBase
 {
     private readonly IActivityService _staffActivityService;
-    
+
     private readonly AuthenticationHelper _authenticationHelper;
 
     public ActivityController(
@@ -32,7 +32,7 @@ public class ActivityController : ControllerBase
     {
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffActivityService.FindAllActivityLogsAsync(staffId);
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpGet("{id:int}")]
@@ -40,6 +40,6 @@ public class ActivityController : ControllerBase
     {
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffActivityService.FindActivityLogAsync(id, staffId);
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/CategoryController.cs b/XWave.Web/Controllers/CategoryController.cs
index f5eca1f..8c1d121 100644
--- a/XWave.Web/Controllers/CategoryController.cs
+++ b/XWave.Web/Controllers/CategoryController.cs
@@ -1,4 +1,4 @@
-﻿using System.Collections.Generic;
+using System.Collections.Generic;
 using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
@@ -45,8 +45,7 @@ public class CategoryController : ControllerBase
     {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _categoryService.AddCategoryAsync(managerId, newCategory);
-
-        return result.OnSuccess(this.Created($"{this.ApiUrl()}/category/admin/{result.Value}")); 
+        return result.OnSuccess(x => this.Created($"{this.ApiUrl()}/category/admin/{result.Value}"));
     }
 
     [HttpPut("{id:int}")]
@@ -56,7 +55,7 @@ public class CategoryController : ControllerBase
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _categoryService.UpdateCategoryAsync(managerId, id, updatedCategory);
 
-        return result.OnSuccess(this.Updated($"{this.ApiUrl()}/category/admin/{id}")); 
+        return result.OnSuccess(this.Updated($"{this.ApiUrl()}/category/admin/{id}"));
     }
 
     [HttpDelete("{id:int}")]
@@ -71,6 +70,6 @@ public class CategoryController : ControllerBase
 
         var result = await _categoryService.DeleteCategoryAsync(managerId, id);
 
-        return result.OnSuccess(NoContent()); 
+        return result.OnSuccess(NoContent());
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/CustomerAccountController.cs b/XWave.Web/Controllers/CustomerAccountController.cs
index 6e96e3a..e0061c5 100644
--- a/XWave.Web/Controllers/CustomerAccountController.cs
+++ b/XWave.Web/Controllers/CustomerAccountController.cs
@@ -1,4 +1,4 @@
-﻿using System.Threading.Tasks;
+using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.Extensions.Options;
@@ -8,6 +8,7 @@ using XWave.Core.Services.Interfaces;
 using XWave.Core.ViewModels.Authentication;
 using XWave.Web.Utils;
 using XWave.Core.Services.Communication;
+using XWave.Web.Extensions;
 
 namespace XWave.Web.Controllers;
 
@@ -35,7 +36,7 @@ public class CustomerAccountController : ControllerBase
         [FromBody] RegisterCustomerViewModel viewModel)
     {
         var result = await _customerAccountService.RegisterCustomerAsync(viewModel);
-        if (!result.Succeeded) 
+        if (!result.Succeeded)
         {
             return BadRequest(result.Error);
         }
@@ -57,12 +58,6 @@ public class CustomerAccountController : ControllerBase
     {
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _customerAccountService.UpdateSubscriptionAsync(customerId, isSubscribed);
-
-        if (result.Succeeded)
-        {
-            return NoContent();
-        }
-
-        return UnprocessableEntity(result.Error);
+        return result.OnSuccess(NoContent());
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/DiscountController.cs b/XWave.Web/Controllers/DiscountController.cs
index d8186a0..5a6bdf3 100644
--- a/XWave.Web/Controllers/DiscountController.cs
+++ b/XWave.Web/Controllers/DiscountController.cs
@@ -1,4 +1,4 @@
-﻿using System.Collections.Generic;
+using System.Collections.Generic;
 using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
@@ -56,8 +56,7 @@ public class DiscountController : ControllerBase
         var userId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _discountService.CreateDiscountAsync(userId, newDiscount);
 
-        return result.OnSuccess(
-            this.Created($"{this.ApiUrl()}/discount/{result.Value}"));
+        return result.OnSuccess(x => this.Created($"{this.ApiUrl()}/discount/{x}"));
     }
 
     [HttpPut("{id:int}")]
@@ -73,7 +72,7 @@ public class DiscountController : ControllerBase
     [HttpDelete("{id:int}")]
     [Authorize(Roles = nameof(RoleNames.Manager))]
     public async Task<ActionResult> Delete(int id)
-    { 
+    {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _discountService.RemoveDiscountAsync(managerId, id);
         return result.OnSuccess(NoContent());
diff --git a/XWave.Web/Controllers/OrderController.cs b/XWave.Web/Controllers/OrderController.cs
index 0302890..d8d433a 100644
--- a/XWave.Web/Controllers/OrderController.cs
+++ b/XWave.Web/Controllers/OrderController.cs
@@ -1,4 +1,4 @@
-﻿using System.Threading.Tasks;
+using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using XWave.Web.Extensions;
@@ -33,7 +33,7 @@ public class OrderController : ControllerBase
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _orderService.FindAllOrdersAsync(customerId);
 
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpGet("{id:int}")]
@@ -42,8 +42,8 @@ public class OrderController : ControllerBase
     {
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _orderService.FindOrderByIdAsync(customerId, id);
-        
-        return result.OnSuccess(Ok(result.Value));
+
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpPost]
@@ -57,6 +57,6 @@ public class OrderController : ControllerBase
         }
 
         var result = await _orderService.AddOrderAsync(purchaseViewModel, customerId);
-        return result.OnSuccess(this.Created($"{this.ApiUrl()}/order/{result.Value}"));
+        return result.OnSuccess(x => this.Created($"{this.ApiUrl()}/order/{x}"));
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/PaymentAccountController.cs b/XWave.Web/Controllers/PaymentAccountController.cs
index 0a4ea76..43c5362 100644
--- a/XWave.Web/Controllers/PaymentAccountController.cs
+++ b/XWave.Web/Controllers/PaymentAccountController.cs
@@ -1,4 +1,4 @@
-﻿using System.Collections.Generic;
+using System.Collections.Generic;
 using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
@@ -34,7 +34,7 @@ public class PaymentAccountController : ControllerBase
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _paymentService.FindAllTransactionDetailsForStaffAsync(staffId);
 
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpGet()]
@@ -44,7 +44,7 @@ public class PaymentAccountController : ControllerBase
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _paymentService.FindAllPaymentAccountsAsync(customerId);
 
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpGet("{id:int}")]
@@ -54,7 +54,7 @@ public class PaymentAccountController : ControllerBase
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _paymentService.FindPaymentAccountAsync(id, customerId);
 
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpPost("delete/{paymentId:int}")]
@@ -85,6 +85,6 @@ public class PaymentAccountController : ControllerBase
         var customerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _paymentService.AddPaymentAccountAsync(customerId, inputPayment);
 
-        return result.OnSuccess(this.Created($"{this.ApiUrl()}/payment/details/{result.Value}"));
+        return result.OnSuccess(x => this.Created($"{this.ApiUrl()}/payment/details/{x}"));
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Controllers/ProductController.cs b/XWave.Web/Controllers/ProductController.cs
index cf8b046..004f0fd 100644
--- a/XWave.Web/Controllers/ProductController.cs
+++ b/XWave.Web/Controllers/ProductController.cs
@@ -1,4 +1,4 @@
-﻿using Microsoft.AspNetCore.Authorization;
+using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using System;
 using System.Collections.Generic;
@@ -45,8 +45,8 @@ public class ProductController : ControllerBase
     {
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _productService.FindAllProductsForStaff(false, staffId);
-    
-        return result.Succeeded 
+
+        return result.Succeeded
             ? Ok(result.Value)
             : NotFound();
     }
@@ -64,7 +64,7 @@ public class ProductController : ControllerBase
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _productService.FindProductByIdForStaff(id, staffId);
 
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpPost]
@@ -74,7 +74,7 @@ public class ProductController : ControllerBase
         var staffId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _productService.AddProductAsync(staffId, productViewModel);
 
-        return result.OnSuccess(this.Created($"{this.ApiUrl()}/product/{result.Value}/private"));
+        return result.OnSuccess(x => this.Created($"{this.ApiUrl()}/product/{x}/private"));
     }
 
     [HttpPut("{id:int}")]
diff --git a/XWave.Web/Controllers/StaffAccountController.cs b/XWave.Web/Controllers/StaffAccountController.cs
index a426c0d..04acff7 100644
--- a/XWave.Web/Controllers/StaffAccountController.cs
+++ b/XWave.Web/Controllers/StaffAccountController.cs
@@ -1,4 +1,4 @@
-﻿using System.Collections.Generic;
+using System.Collections.Generic;
 using System.Threading.Tasks;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
@@ -33,7 +33,7 @@ public class StaffAccountController : ControllerBase
     {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffAccountService.GetAllStaffAccounts(managerId);
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpGet("{id}")]
@@ -41,7 +41,7 @@ public class StaffAccountController : ControllerBase
     {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffAccountService.GetStaffAccountById(id, managerId);
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpPost("{id}")]
@@ -49,7 +49,7 @@ public class StaffAccountController : ControllerBase
     {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffAccountService.RegisterStaffAccount(staffId, managerId, viewModel);
-        return result.OnSuccess(Ok(result.Value));
+        return result.OnSuccess(x => Ok(x));
     }
 
     [HttpPut("{id}")]
@@ -59,12 +59,12 @@ public class StaffAccountController : ControllerBase
     {
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffAccountService.UpdateStaffAccount(
-            staffAccountId, 
-            managerId, 
+            staffAccountId,
+            managerId,
             staffAccountViewModel);
 
         return result.OnSuccess(
-            this.Updated($"{this.ApiUrl()}/staff-account/{staffAccountId}")); 
+            this.Updated($"{this.ApiUrl()}/staff-account/{staffAccountId}"));
     }
 
     [HttpDelete("{id}")]
@@ -73,6 +73,6 @@ public class StaffAccountController : ControllerBase
         var managerId = _authenticationHelper.GetUserId(HttpContext.User.Identity);
         var result = await _staffAccountService.DeactivateStaffAccount(staffAccountId, managerId);
         return result.OnSuccess(
-            this.Updated($"{this.ApiUrl()}/staff-account/{staffAccountId}")); 
+            this.Updated($"{this.ApiUrl()}/staff-account/{staffAccountId}"));
     }
 }
\ No newline at end of file
diff --git a/XWave.Web/Extensions/ServiceResultExtension.cs b/XWave.Web/Extensions/ServiceResultExtension.cs
index 66013c8..23164b7 100644
--- a/XWave.Web/Extensions/ServiceResultExtension.cs
+++ b/XWave.Web/Extensions/ServiceResultExtension.cs
@@ -1,4 +1,5 @@
 using Microsoft.AspNetCore.Mvc;
+using System;
 using XWave.Core.Services.Communication;
 
 namespace XWave.Web.Extensions;
@@ -9,14 +10,14 @@ public static class ServiceResultExtension
     /// Map service result to HTTP result with a value based on its error status.
     /// </summary>
     /// <param name="result">Result to map.</param>
-    /// <param name="successfulResult">Value to return if result is successful.</param>
+    /// <param name="convertToHttpResult">Function that returns the value of successful results.</param>
     /// <returns>A HTTP status result.</returns>
     public static ActionResult OnSuccess<T>(
-        this ServiceResult<T> result, 
-        ActionResult successfulResult) where T : notnull
+        this ServiceResult<T> result,
+        Func<T, ActionResult> convertToHttpResult) where T : notnull
     {
         return result.Succeeded
-            ? successfulResult
+            ? convertToHttpResult(result.Value)
             : result.Error.MapToHttpResult();
     }
 
@@ -27,7 +28,7 @@ public static class ServiceResultExtension
     /// <param name="successfulResult">Value to return if result is successful.</param>
     /// <returns>A HTTP status result.</returns>
     public static ActionResult OnSuccess(
-        this ServiceResult result, 
+        this ServiceResult result,
         ActionResult successfulResult)
     {
         return result.Succeeded
